README file for Programming Assignment 4 (C++ edition)
======================================================

Your directory should now contain the following files:

 Makefile               -> [course dir]/assignments/PA4/Makefile
 README
 ast-lex.cc             -> [course dir]/src/PA4/ast-lex.cc
 ast-parse.cc           -> [course dir]/src/PA4/ast-parse.cc
 bad.cl
 cgen                   -> [course dir]/etc/../lib/.i
 cool-tree.cc           -> [course dir]/src/PA4/cool-tree.cc
 cool-tree.h
 cool-tree.handcode.h
 dumptype.cc            -> [course dir]/src/PA4/dumptype.cc
 good.cl
 handle_flags.cc        -> [course dir]/src/PA4/handle_flags.cc
 mycoolc                -> [course dir]/src/PA4/mycoolc
 mysemant               -> [course dir]/src/PA4/mysemant
 semant-phase.cc        -> [course dir]/src/PA4/semant-phase.cc
 semant.cc
 semant.h
 stringtab.cc           -> [course dir]/src/PA4/stringtab.cc
 symtab_example.cc      -> [course dir]/src/PA4/symtab_example.cc
 tree.cc                -> [course dir]/src/PA4/tree.cc
 utilities.cc           -> [course dir]/src/PA4/utilities.cc
 *.d                      dependency files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA4

        The Makefile contains targets for compiling and running your
        program. DO NOT MODIFY.

        The README contains this info. Part of the assignment is to fill
        the README with the write-up for your project. You should
        explain design decisions, explain why your code is correct, and
        why your test cases are adequate. It is part of the assignment
        to clearly and concisely explain things in text as well as to
        comment your code.  Just edit this file.

        good.cl and bad.cl test a few features of the semantic checker.
        You should add tests to ensure that good.cl exercises as many
        legal semantic combinations as possible and that bad.cl
        exercises as many kinds of semantic errors as possible.

        semant.h contains declarations and definitions for the semantic
        analyzer.  Place class definitions for the structures you will
        use here.

        cool-tree.aps contains the definitions for the tree language
        which you use to construct the abstract syntax tree (AST).
        From this file, cool-tree.h and cool-tree.cc are automatically 
        generated by a utility that compiles the specification into
        C++ functions for producing and consuming the tree nodes.
        This file is provided for your reference.  DO NOT MODIFY.

        tree.{cc|h} contain definitions used by the tree package.  DO
        NOT MODIFY.

        cool-tree.h, and cool-tree.handcode.h specify and give an
        implementation of Cool ASTs (see the README for PA3 and the
        "Cool Tour").  In this assignment, you will need to add
        functions to the AST classes to store, fetch, and compute
        information about the AST.  Note that cool-tree.handcode.h
        differs slightly from the file supplied for PA3.

        You should NOT remove any definitions that are already present
        in cool-tree.h and cool-tree.handcode.h.  These functions and
        data members are required for the system to function properly.

        You should add any fields and methods to the classes you need to 
        perform semantic analysis.  You will need to add, for example, 
        methods which traverse the expressions of the tree and implement 
        the type-checking rules.

        cool-tree.cc contains definitions of the provided methods,
        and instantiations of the template for the list handling functions.
        You should not modify this file, but place definitions of all
        methods you add to cool-tree.h or cool-tree.handcode.h in semant.cc.
        DO NOT MODIFY cool-tree.cc

        semant.cc is the file in which you should write your semantic
        analyzer.  The main() procedure calls the method `semant'
        on `ast_root', the root of the abstract syntax tree generated by
        the parser.  There are methods supplied that you should use to report 
        errors. You are relatively free in how you decide to structure the 
        semantic checker, but don't modify the error printing routines.

        ast-lex.cc and ast-parse.cc implement a lexer and a parser for
        reading text representation of ASTs from console in the format
        produced by the parser phase. DO NOT MODIFY.

        semant-phase.cc contains a test driver for semantic analysis.
        The main program reads an AST in text form from standard input,
        parses it, and then produces a type-annotated AST on standard
        output.  The script mycoolc can pass any of the standard flags
        to the semantic analyzer as well; for this assignment, -s
        (semantic analysis debug) may be useful as it sets a global
        variable semant_debug to true (1).  If you want your semantic
        checker to print debug information when the option is set, write
        your debug code in the following format:

              if (semant_debug)
              {
                ...
              }

        semant_debug is provided as a convenience. You don't need to use
        the debugging flags if you don't want to. DON'T MODIFY
        semant-phase.cc

        symtab.h contains a symbol table implementation. Read the
        comments in the file, the "Cool Tour", and look at the example
        in symtab_example.cc.  You are not required to use this code,
        but you may find it useful. DO NOT MODIFY.

Instructions
------------

        To compile the example use of the symbol table, type

        % gmake symtab_example
        % ./symtab_example

        To compile your semantic analyzer program type:

        % gmake semant

        To test your semantic checker, type:

        % ./mysemant good.cl

        mysemant is a version of mycoolc that omits code generation.
        mysemant parses all the cool files given on the command line and
        builds a single abstract syntax tree containing all class
        definitions appearing in the input files. Your semantic checker
        is then called on this abstract syntax tree.  If there are no
        errors, the program produces a type-annotated abstract syntax
        tree as output.

        To run your checker on the files good.cl and bad.cl type:

        % gmake dotest

        If you think your semantic checker is correct and behaves like
        the one we wrote, you can try to run mycoolc using your checker,
        your parser and also your lexical analyzer if you choose (see
        below for instructions).  Remember if your lexer, parser or
        checker behaves in an unexpected manner, you may get errors
        anywhere.

        To turnin your work type:

        % gmake submit-clean

        And run the "submit" program following the instructions on the
        course web page.

        Running "submit" will collect the files semant.cc, semant.h,
        cool-tree.h, good.cl, bad.cl, good.output, bad.output, and
        README. Don't forget to edit the README file to include your
        write-up, and to write your own test cases in good.cl and
        bad.cl.  

        You may turn in the assignment as many times as you like.
        However, only the last version will be retained for grading.

        If you change architectures you must issue

        % gmake clean

        when you switch from one type of machine to the other.
        If at some point you get weird errors from the linker,
        you probably forgot this step.

        GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------
Etapas da Geração de Código
---------------------------

Como de costume, dividi essa etapa em várias passadas -- no caso, três. Na primeira, é montado 
o grafo de herança (código que já havia sido disponibilizado). Na segunda, diversas informações
sobre as classes são anotadas nas mesmas, tais como a class tag, o valor padrão, suas tabelas de
despacho, o layout dos objetos, entre outros itens que compõe a parte de dados do programa em MIPS.

Na terceira etapa, finalmente, eu gero o código de cada método presente no programa, iterando
recursivamente sobre as expressões dos mesmos. Nesta etapa eu utilizo extensivamente as estruturas
criadas nas passadas anteriores, como por exemplo a "coordenada" de cada variável (se ela está na
pilha ou no objeto, e qual seu offset, entre outros).


Notas de Implementação
----------------------

Gostaria de ressaltar alguns tipos que eu mesmo defini e que foram de extrema utilidade no desenvolvimento do TP.

* Coordinate - Uma tupla contendo dois campos: um offset (int) e um registrador (char*);

* EnvironmentT - um alias para SymbolTable<Symbol,Coordinate>. É aqui que guardo a informação de onde determinado símbolo se encontra (offset e registrador - que podem ser FP ou S0). Como essa
classe é uma SymbolTable, ela lida com a questão de escopos perfeitamente. Cada classe do programa possui uma estrutura de tipo EnvironmentT;

* DispTableT - um alias para std::vector<std::pair<Symbol, CgenNode*> >. É aqui que guardo os métodos da tabela de despacho de cada classe, observando as regras de polimorfismo. Cada classe
do programa possui uma estrutura do tipo DispTableT.

Testes
------

Adotei uma estratégia ligeiramente mais "manual" neste TP. Fui criando pequenos métodos no arquivo
example.cl, cada qual testava uma funcionalidade apenas. Por exemplo: criei o método Main.add, 
Main.sub, Main.lt, Main.dispatch, etc.

Averiguei a corretude do Gerador de Código analisando minuciosamente o arquivo assembly gerado pelo mesmo (example.s). Além disso, rodei algumas funções que imprimem resultados na tela (através de
out_string e out_int) para averiguar a corretude através do interpretador spim. Tais testes 
també podem ser conferidos no arquivo example.cl
